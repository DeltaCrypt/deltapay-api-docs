{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#abstract","title":"Abstract","text":"<p>This document acts as a guide for DeltaPay\u2019s open API. It documents the features we expect will be most commonly used by our clients and partners.</p> <p>We firmly believe in open and accessible APIs that anyone can access without additional charges or fees. For this reason, we have decided to make the entire REST interface used by our mobile application accessible to the public. This also means that the API is significantly more extensive than the features highlighted in this document. For a complete list of the endpoints available, please visit:</p> <ul> <li>https://api.dev.deltacrypt.net/docs</li> <li>https://api.beta.deltacrypt.net/docs</li> </ul> <p>to view the auto-generated documentation online for our respective development and production environments.</p>"},{"location":"#environments","title":"Environments","text":"<p>DeltaPay currently offers two mutually exclusive environments: development and production.</p> <p>The development environment is meant for testing and incorporates any additional features or changes to the API that have not yet been published to production. It runs an identical technical setup to the production environment. Still, it does not have to abide by any regulation as the Delta on development is solely for testing and, thus, worthless.</p> <p>We highly recommend testing on the development environment first before connecting to the production endpoints. If API keys are used, DeltaPay reserves the right to test the proposed applications before issuing permissions to the production API keys.</p>"},{"location":"#api-request-guidelines","title":"API Request Guidelines","text":"<p>Unless otherwise specified:</p> <ul> <li>POST requests expect JSON-encoded data.</li> <li>GET and DELETE requests expect URL-encoded data.</li> </ul> <p>All endpoints will return a status code 200 (OK) if no exceptions occur. Other relevant response codes include:</p> <ul> <li>404 - Not Found: The requested resource (e.g., a user) does not exist.</li> <li>401 - Unauthorized: See Authentication Errors.</li> <li>500 - Internal Server Error: Please contact DeltaPay.</li> </ul> <p>All endpoints return JSON-encoded data. If no data is returned, the response will be a generic success object:</p> <pre><code>{\n  \"success\": true\n}\n</code></pre> <p>Unless otherwise specified, this is the default response format.</p>"},{"location":"authentication/","title":"Authentication","text":"<p>The API uses three ways of authentication: - OAuth 2.0 token - API Key - Blockchain transaction signatures</p> <p>The OAuth 2.0 token and API Key can largely be used interchangeably, whereas functions that entail state changes on the blockchain will generally have to be signed locally by the client.</p> <p>Note: For the endpoints that allow authentication using both the token and API key, either or the other must be passed.</p>"},{"location":"authentication/#oauth-20-token","title":"OAuth 2.0 Token","text":"<p>This form of authentication is designed for individual users. The generated token contains the <code>user_id</code> and can be used to determine the caller without the need to explicitly provide the <code>user_id</code>.</p>"},{"location":"authentication/#login-endpoint","title":"Login Endpoint","text":"<p>The <code>POST /login</code> endpoint expects <code>x-www-form-url-encoded</code> data. This is an exception, as all other POST endpoints expect JSON-encoded data.</p> <p>Request Parameters - <code>username</code>: <code>string</code> - <code>password</code>: <code>string</code></p> <p>Example Response <pre><code>{\n  \"token_type\": \"bearer\",\n  \"access_token\": \"eyJraWQiOiI.......\",\n  \"refresh_token\": \"eyJjdHkiOiJK......\",\n  \"user_id\": 1,\n  \"username\": \"adrian\",\n  \"phone_country_dialcode\": \"268\",\n  \"phone_number\": \"24045443\",\n  \"first_name\": \"Adrian Albert\",\n  \"last_name\": \"Koch\"\n}\n</code></pre></p> <p>The login endpoint returns two distinct tokens: - <code>access_token</code>: Used to authenticate requests. Generally valid for 15 minutes unless revoked. - <code>refresh_token</code>: Used to obtain a new access token by calling the <code>POST /refresh-access-token</code> endpoint.</p>"},{"location":"authentication/#usage-example","title":"Usage Example","text":"<p>The <code>access_token</code> must be passed as a bearer token in the API request header. Below is an example call to the <code>GET /user</code> endpoint:</p> <pre><code>curl -X 'GET'\n  'https://api.dev.deltacrypt.net/user'\n  -H 'accept: application/json'\n  -H 'Authorization: Bearer eyJraWQi......'\n</code></pre> <p>Note: The <code>user_id</code> does not need to be explicitly passed, as it can be determined from the token. If a value is provided, it will have precedence.</p>"},{"location":"authentication/#api-key","title":"API Key","text":"<p>Authentication using an API token is designed for institutions that want to connect to the API in a programmatic manner. See the API Key Creation section for more detail on how to create and link API tokens.</p> <p>Multiple tokens can be linked to the same legal entity with varying sets of permissions attached to them.</p> <p>The API key must be passed as <code>x-api-key</code> in the API request header. Below is an example call to the <code>GET /user</code> endpoint:</p> <pre><code>curl -X 'GET' \\\n  'https://api.dev.deltacrypt.net/user?user_id=2' \\\n  -H 'accept: application/json' \\\n  -H 'x-api-key: KGD7Wf.....'\n</code></pre> <p>Note: In contrast to the <code>access_token</code> usage, the <code>user_id</code> must be provided in the request as it cannot be determined from the API key.</p>"},{"location":"authentication/#authentication-errors","title":"Authentication Errors","text":"<p>Errors that occur in connection with authentication result in the response code 401 (Unauthorized).</p> <p>The error response will provide details on the type of exception, e.g.</p> <pre><code>{\n  \"detail\": \"Token expired\"\n}\n</code></pre> <p>The following exceptions can occur: - Not authorized - Username or password incorrect - User not confirmed - Username not found - Could not validate credentials - Failed to validate token - Invalid API key - API key has expired - API key has been revoked - Provide either a token or an API key, not both - Either a token or an API key must be provided</p> <p>SignUp:   - Failed   - User not found   - Username not found   - User already registered   - Username already in use   - Password does not meet the requirements   - Confirmation code is incorrect   - Confirmation code has expired   - Attempt limit exceeded</p> <p>Login:   - Failed   - Another challenge is required   - Username not found in the database</p> <p>Refresh Access Token: Failed</p> <p>Forgot Password:   - Failed   - Username not found   - Attempt limit exceeded   - Confirmation code is incorrect   - Confirmation code has expired   - Too many failed attempts   - Password does not meet the requirements</p> <p>Change Password:   - Failed   - Password does not meet the requirements   - Attempt limit exceeded</p> <p>Change Phone Number:   - Failed   - Code is incorrect   - Code has expired   - Attempt limit exceeded</p> <p>Another common cause for an endpoint to return 401 (Unauthorized) is missing permissions, e.g.</p> <pre><code>{\n  \"detail\": \"API key does not have the required permission: view_kyc_data (target_user_id: 2)\"\n}\n</code></pre>"},{"location":"authentication/#blockchain-transaction-signatures","title":"Blockchain Transaction Signatures","text":"<p>The interaction with the blockchain follows three simple steps: 1. Obtain the raw blockchain transaction (generally using one of the GET endpoints prefixed with raw). 2. Sign the transaction locally using the Ethereum wallet previously generated. 3. Optionally query the state of the blockchain transaction.</p> <p>For more details on specific endpoints, please refer to the example attached to this document or contact DeltaPay directly.</p> <p>For the transaction to succeed, the wallet used to sign it must be whitelisted on the blockchain. This requires the caller to provide the public wallet address of the wallet they want to link to the API-key-account (or user-account) pair, which happens implicitly in one of the following ways: - <code>POST /account/link-api-key</code> - <code>POST /account/create-personal</code> - <code>POST /account/register-business</code></p> <p>For the purpose of this document, we focus on the scenario where API keys are used. For more details on linking an API key to an account, refer to Linking API Key in the setup section.</p> <p>Note: Transactions signed by a wallet linked to an API key differ in some ways from those linked to a user. In particular: - API Keys do not have a spending allowance. Therefore, no transaction initiated by an API key will ever need to be approved. - API keys cannot approve other transactions. - API keys cannot set spending allowances. - API keys cannot deactivate accounts.</p> <p>Should you require any of the above features, please contact DeltaPay directly.</p>"},{"location":"b2c/","title":"B2C","text":"<p>The process of sending money to a customer (or another business) encompasses the following:</p> <ul> <li>Check whether the transaction is possible (optional)</li> <li>Initiate the transaction</li> <li>Sign the raw blockchain transaction</li> <li>Submit the signed blockchain transaction</li> <li>Query the blockchain transaction (optional)</li> <li>Receive a callback when the transaction status changes (IPN)</li> <li>Query the transaction</li> </ul>"},{"location":"b2c/#check-transaction-possible","title":"Check Transaction Possible","text":"<p>Before initiating a transaction, it is advisable to check whether the transaction will be possible to avoid more complex polling or callback logic. There are a number of reasons a transaction might fail:</p> <ul> <li>Insufficient account balance</li> <li>Limits exceeded</li> <li>Transaction amount too low</li> <li>Account suspended or closed</li> <li>User not whitelisted</li> </ul> <p>Note: Insufficient spending allowances do not prevent the transaction from occurring; rather, the transaction will require approval, which will, in turn, reflect in the state of the transaction.</p>"},{"location":"b2c/#get-transactiontransfer-possible","title":"<code>GET /transaction/transfer-possible</code>","text":"<p>Request Parameters</p> <ul> <li><code>sender_wallet_address</code>: string</li> <li><code>amount</code>: number</li> <li><code>transaction_type</code>: string</li> <li><code>recipient_username</code>: Optional[string]</li> <li><code>recipient_account_id</code>: Optional[number]</li> </ul> <p>The <code>sender_wallet_address</code> must be linked to an account.</p> <p>Either the <code>recipient_username</code> or <code>recipient_account_id</code> (or both) must be provided. If only the <code>recipient_username</code> is provided, the recipient account will be assumed to be the user's personal account. If both the <code>recipient_username</code> and <code>recipient_account_id</code> are provided, the <code>recipient_username</code> will be stored on the database in addition to the account.</p> <p>Example Response <pre><code>{\n    \"possible\": true,\n    \"sender_account_id\": 1004,\n    \"fee\": 0\n}\n</code></pre></p> <p>or, alternatively, when the transfer is not possible</p> <pre><code>{\n    \"possible\": false,\n    \"error_name\": \"ERR_NOT_ENOUGH_BALANCE\",\n    \"error_arguments\": [\n        \"1004\",\n        \"446370000000000000000\",\n        \"5000000000000000000000\"\n    ]\n}\n</code></pre>"},{"location":"b2c/#initiate-transactions","title":"Initiate Transactions","text":""},{"location":"b2c/#get-transactioninitiate-transfer","title":"<code>GET /transaction/initiate-transfer</code>","text":"<p>Request Parameters</p> <ul> <li><code>sender_wallet_address</code>: string</li> <li><code>amount</code>: number</li> <li><code>note</code>: Optional[string]</li> <li><code>sender_till_id</code>: Optional[number]</li> <li><code>recipient_username</code>: Optional[string]</li> <li><code>recipient_account_id</code>: Optional[number]</li> <li><code>recipient_till_id</code>: Optional[number]</li> <li><code>transaction_type</code>: string</li> <li><code>source_of_funds</code>: Optional[string]</li> </ul> <p>Example Response</p> <pre><code>{\n    \"raw_transaction\": {\n        \"from\": \"0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf\",\n        \"to\": \"0x52A816dB82157a5f4b2c4Fb5Be745AC4103Db674\",\n        \"nonce\": 0,\n        \"chainId\": \"1337\",\n        \"data\": \"0x21d43aaf000000000.....\",\n        \"gasLimit\": \"0x1ffffffffffffe\",\n        \"gasPrice\": 0,\n        \"type\": 0\n    },\n    \"topic\": \"initiateTransfer\",\n    \"transaction_id\": 166\n}\n</code></pre>"},{"location":"b2c/#sign-the-transaction","title":"Sign the Transaction","text":"<p>The next step involves signing the <code>raw_transaction</code> returned by the <code>GET /transaction/initiate-transfer</code> endpoint. The customer may use any of the available libraries that provide Ethereum functions.</p> <ul> <li> <p>JavaScript / TypeScript</p> <ul> <li>ethers.js</li> <li>web3.js</li> </ul> </li> <li> <p>Python</p> <ul> <li>web3.py</li> <li>eth-account</li> </ul> </li> <li> <p>Go</p> <ul> <li>go-ethereum (geth)</li> <li>ethers (for Go)</li> </ul> </li> <li> <p>Java</p> <ul> <li>web3j</li> </ul> </li> <li> <p>C#</p> <ul> <li>Nethereum</li> </ul> </li> <li> <p>Ruby</p> <ul> <li>ethereum.rb</li> </ul> </li> <li> <p>Swift (iOS)</p> <ul> <li>web3.swift</li> </ul> </li> <li> <p>Rust</p> <ul> <li>ethers-rs</li> <li>web3-rs</li> </ul> </li> </ul>"},{"location":"b2c/#submit-the-signed-transaction","title":"Submit the Signed Transaction","text":"<p>Once the transaction is signed, it needs to be submitted to the blockchain. Transactions are processed asynchronously but the order of transactions is preserved.</p>"},{"location":"b2c/#post-blockchainsigned-transaction","title":"<code>POST /blockchain/signed-transaction</code>","text":"<p>Request Parameters</p> <ul> <li><code>transaction_bytes</code>: string</li> <li><code>topic</code>: string</li> </ul> <p>Use the <code>topic</code> that was returned from the <code>GET /transaction/initiate-transfer</code> endpoint.</p> <p>Example Response</p> <pre><code>{\n    \"success\": true,\n    \"tracking_id\": 214\n}\n</code></pre>"},{"location":"b2c/#get-blockchaintransaction-status","title":"<code>GET /blockchain/transaction-status</code>","text":"<p>Optionally, the client can poll the status of the blockchain transaction. A blockchain transaction can either be <code>pending</code>, <code>failed</code>, or <code>succeeded</code>.</p> <p>Request Parameters</p> <ul> <li><code>transaction_id</code>: string</li> </ul> <p>Example Response</p> <pre><code>{\n    \"blockchain_transaction_status\": \"failed\"\n}\n</code></pre>"},{"location":"b2c/#get-blockchaintransactionerror-message","title":"<code>GET /blockchain/transaction/error-message</code>","text":"<p>If the blockchain transaction failed, the customer can retrieve more information on the failure reason.</p> <p>Request Parameters</p> <ul> <li><code>transaction_id</code>: string</li> </ul> <p>Example Response</p> <pre><code>{\n    \"error_message\": \"{\\n  \\\"fragment\\\": {\\n    \\\"type\\\": \\\"error\\\",\\n    \\\"inputs\\\": [\\n      {\\n \n    \\\"name\\\": \\\"user\\\",\\n        \\\"type\\\": \\\"address\\\",\\n        \\\"baseType\\\": \\\"address\\\",\\n    \n    \\\"components\\\": null,\\n        \\\"arrayLength\\\": null,\\n        \\\"arrayChildren\\\": null\\n  \n    }\\n    ],\\n    \\\"name\\\": \\\"ERR_USER_NOT_WHITELISTED\\\"\\n  },\\n  \\\"name\\\":\n    \\\"ERR_USER_NOT_WHITELISTED\\\",\\n \\\"args\\\": [\\n    \n    \\\"0x2B5AD5c4795c026514f8317c7a215E218DcCD6cF\\\"\\n  ],\\n  \\\"signature\\\": \n    \\\"ERR_USER_NOT_WHITELISTED(address)\\\",\\n  \\\"selector\\\": \\\"0x675037d5\\\"\\n}\"\n}\n</code></pre> <p>Finally, you can wait for the IPN and query the transaction as described in the IPN and transaction querying sections.</p>"},{"location":"c2b/","title":"C2B","text":"<p>The process of receiving money from a customer encompasses the following:</p> <ol> <li>Receive a callback when the transaction status changes (IPN).</li> <li>View the transaction.</li> </ol> <p>We are working on a feature that will allow for prompting the customer to initiate via a notification sent to their device that, when clicked, will pre-fill the send money dialog. Until then, the user must enter the information manually.</p>"},{"location":"c2b/#ipn","title":"IPN","text":"<p>To receive IPNs, the user must first register the base callback URL as described in the Setup section. The callback is triggered for both the sender and recipient accounts using the registered callbacks for the respective accounts, if available. The callback URL format is as follows:</p> <pre><code>base URL + /transaction/status\n</code></pre> <p>The notification payload includes the <code>transaction_id</code> and <code>status</code>. Based on the transaction status, the client can determine whether to retrieve more detailed information about the transaction.</p> <p>Important: This callback is not signed, meaning it could originate from anyone. The user must call <code>GET /full-transaction/from-id</code> to confirm the transaction data.</p> <p>Example Callback Body <pre><code>{\n    \"transaction_id\": 42,\n    \"status\": \"succeeded\"\n}\n</code></pre></p> <p>The following transaction statuses are notified about:</p> <ul> <li>initiated</li> <li>approved</li> <li>succeeded</li> <li>failed</li> </ul> <p>Note: Transactions that do not require approval or finalization will automatically move to the approved or succeeded state. For instance, a bank deposit initiated by a user with sufficient spending allowance will begin in the approved state. Similarly, a transfer that does not require approval will immediately be marked as succeeded.</p>"},{"location":"c2b/#querying-transactions","title":"Querying Transactions","text":""},{"location":"c2b/#get-full-transactionfrom-id","title":"<code>GET /full-transaction/from-id</code>","text":"<p>This endpoint returns all the details on the transaction as opposed to <code>GET accounts/transactions</code>, which returns transactions from the calling account's perspective.</p> <p>The caller can optionally specify the account from whose perspective the amount, fee, and commission will be viewed. To demonstrate this, consider a cash withdrawal of E10. The sender (i.e., the user withdrawing the cash) pays a fee calculated as:</p> <pre><code>fee(x) = 1 + 0.015x\n</code></pre> <p>and 1% goes as commission to the recipient (i.e., the merchant offering the withdrawal). This will result in the following responses from the endpoint, depending on which account is specified in the <code>caller_account_id</code>:</p> <ul> <li> <p><code>caller_account_id = sender_account_id</code> <pre><code>{\n    \"transaction_id\": 42,\n    ...\n    \"amount\": 10,\n    \"cashback_received\": 0,\n    \"cashback_spent\": 0,\n    \"fee\": 1.15,\n    \"commission_amount\": 0,\n    ...\n}\n</code></pre></p> </li> <li> <p><code>caller_account_id = recipient_account_id</code> <pre><code>{\n    \"transaction_id\": 42,\n    ...\n    \"amount\": 10,\n    \"cashback_received\": 0,\n    \"cashback_spent\": 0,\n    \"fee\": -0.1,\n    \"commission_amount\": 0.1,\n    ...\n}\n</code></pre></p> </li> <li> <p><code>caller_account_id = null</code> <pre><code>{\n    \"transaction_id\": 42,\n    ...\n    \"amount\": 10,\n    \"cashback_received\": 0,\n    \"cashback_spent\": 0,\n    \"fee\": 1.05,\n    \"commission_amount\": 0.1,\n    ...\n}\n</code></pre></p> </li> </ul> <p>Request Parameters</p> <ul> <li><code>transaction_id</code>: <code>number</code></li> <li><code>caller_account_id</code>: <code>Optional[number]</code></li> </ul> <p>Required Permissions</p> <p>The caller must have the <code>view_transactions</code> permission, either generally or specifically for the sender or recipient account. Furthermore, the user's permissions and their potential attachment as an employee to the accounts involved in the transaction will determine whether they can see details on the initiator, approver, and finalizer.</p> <p>Example Response <pre><code>{\n  \"transaction_id\": 42,\n  \"transaction_type\": \"cash_withdrawal\",\n  \"transaction_status\": \"succeeded\",\n  \"initialisation_time\": \"2024-07-15T19:11:07.247411\",\n  \"settled_time\": \"2024-07-15T19:11:11.890845\",\n  \"note\": \"hello world + metadata\",\n  \"source_of_funds\": \"\",\n  \"bank_account\": null,\n  \"sender_account_id\": 123,\n  \"sender_account_name\": \"Personal\",\n  \"sender_name\": \"adrian\",\n  \"sender_till_name\": null,\n  \"recipient_account_id\": 60,\n  \"recipient_account_name\": \"Mbabane Office\",\n  \"recipient_name\": \"DeltaPay\",\n  \"recipient_till_name\": \"Desk 1\",\n  \"amount\": 10,\n  \"cashback_received\": 0,\n  \"cashback_spent\": 0,\n  \"fee\": 1.05,\n  \"commission_amount\": 0.1,\n  \"initiator\": {\n    \"username\": \"adrian\",\n    \"legal_name\": \"Adrian Albert Koch\"\n  },\n  \"approver\": null,\n  \"finaliser\": null\n}\n</code></pre></p>"},{"location":"permissions/","title":"Permissions","text":"<p>The permissions for accessing non-blockchain functions are organized as follows:</p> <ul> <li>General Permissions: These apply broadly across the system.</li> <li>Targeted Permissions: These apply to specific targets, in particular:</li> <li>User</li> <li>Account</li> <li>Legal Entity</li> </ul> <p>Note: No permissions are needed when a <code>UserTargetPermission</code> is required and the caller is the target user. This allows users to request their own data without requiring specific permissions. Any exceptions to this rule will be clearly stated.</p>"},{"location":"permissions/#roles","title":"Roles","text":"<p>General permissions can be attached to a role, which may then be assigned to a user or API key. This allows for logical grouping of permissions and avoids having to assign them individually.</p> <p>Note: Permissions assigned to a role are always general (they do not apply to a specific target).</p>"},{"location":"permissions/#user-and-api-key-permissions","title":"User and API Key Permissions","text":"<p>There are two types of callers:</p> <ul> <li>Users: Who will typically authenticate using an OAuth token.</li> <li>Servers: Which will typically authenticate using an API key.</li> </ul> <p>Both users and API keys can have permissions assigned to them and provide a cognate set of endpoints to grant, view, and revoke roles and permissions respectively. For users there is:</p> <ul> <li><code>POST /user/grant-role</code></li> <li><code>POST /user/grant-account-permissions</code></li> <li><code>POST /user/grant-user-permissions</code></li> <li><code>POST /user/grant-legal-entity-permissions</code></li> <li><code>GET /user/roles</code></li> <li><code>GET /user/permissions</code></li> <li><code>DELETE /user/revoke-role</code></li> <li><code>DELETE /user/revoke-account-permissions</code></li> <li><code>DELETE /user/revoke-user-permissions</code></li> <li><code>DELETE /user/revoke-legal-entity-permissions</code></li> </ul> <p>For API keys there is:</p> <ul> <li><code>POST /api-key/grant-role</code></li> <li><code>POST /api-key/grant-account-permissions</code></li> <li><code>POST /api-key/grant-user-permissions</code></li> <li><code>POST /api-key/grant-legal-entity-permissions</code></li> <li><code>GET /api-key/roles</code></li> <li><code>GET /api-key/permissions</code></li> <li><code>DELETE /api-key/revoke-role</code></li> <li><code>DELETE /api-key/revoke-account-permissions</code></li> <li><code>DELETE /api-key/revoke-user-permissions</code></li> <li><code>DELETE /api-key/revoke-legal-entity-permissions</code></li> </ul> <p>For more detailed documentation on the endpoints above, please refer to the online documentation. For demonstration purposes, we will highlight the following:</p>"},{"location":"permissions/#post-usergrant-account-permissions","title":"<code>POST /user/grant-account-permissions</code>","text":"<p>Multiple permissions can be granted for the same user and target account. This is common because, for instance, an account admin gains many permissions simultaneously when assigned the admin role. Different account targets will require separate calls.</p> <p>Note: Granting a permission twice will not throw an error, but simply be ignored.</p> <p>Request Parameters - <code>subject_user_id</code>: <code>number</code> - <code>permissions</code>: <code>Array[string]</code> - <code>target_account_id</code>: <code>number</code></p> <p>Required Permissions The caller must have the general <code>grant_account_permission</code> permission.</p>"},{"location":"permissions/#get-userpermissions","title":"<code>GET /user/permissions</code>","text":"<p>Request Parameters - <code>user_id</code>: <code>Optional[number]</code></p> <p>If the <code>user_id</code> is not provided and the caller uses an OAuth token to authenticate the call, it can be determined from the token.</p> <p>Required Permissions The caller must have the <code>view_permissions</code> permission, either generally or specifically for the user. As described at the beginning of the Permissions chapter, users do not need any permissions to view their own data.</p> <p>Example Response <pre><code>{\n    {\n      \"permission\": \"view_spending_allowance\",\n      \"target_type\": \"general\"\n    },\n    ...\n    {\n      \"permission\": \"view_transactions\",\n      \"target_type\": \"general\"\n    },\n    {\n      \"permission\": \"view_account_info\",\n      \"target_type\": \"account_list\",\n      \"target_account_ids\": [\n        1001,\n        1004,\n        1006\n      ]\n    },\n    ...\n</code></pre></p>"},{"location":"permissions/#delete-userrevoke-account-permissions","title":"<code>DELETE /user/revoke-account-permissions</code>","text":"<p>This endpoint can be used to revoke either a specific or all permission(s) for a certain user or target account.</p> <p>Request Parameters - <code>subject_user_id</code>: <code>number</code> - <code>target_account_id</code>: <code>number</code> - <code>permissions</code>: <code>Optional[string]</code></p> <p>If permission is null, all permissions are revoked for the target account.</p> <p>Required Permissions The caller must have the general <code>revoke_account_permission</code> permission.</p>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#client-onboarding","title":"Client Onboarding","text":"<p>The client must be fully onboarded before any API integration can take place. This involves the collection and review of the client's documents as well as the account creation process. Please refer to the DeltaPay terms and conditions for more information. In particular, this process involves the following: - DeltaPay creates the legal entity in the system - Client submits a resolution to create the business account(s) and define the AAAs - DeltaPay creates and sets up the account(s) as specified in the resolution</p>"},{"location":"setup/#api-key-creation","title":"API Key Creation","text":"<p>Once the client onboarding and account setup are complete, the API keys can be generated. This process can either be completed by the client himself or by DeltaPay on his behalf. The following points are worth considering:</p> <ul> <li>If the client chooses to generate the keys himself, at least one user who is registered with DeltaPay and employed or trusted by the client should be granted the following permissions:</li> <li><code>create_api_key</code></li> <li><code>view_api_keys</code></li> <li><code>revoke_api_key</code></li> </ul> <p>For example, these permissions may be granted to one of the AAAs.</p> <ul> <li>If DeltaPay generates the API key on behalf of the client, the generated key must be shared with the client via traditional channels, such as email, which may not satisfy the client's security requirements.</li> </ul> <p>If the client decides to generate the key(s) himself, he must call the following endpoint:</p>"},{"location":"setup/#post-legal-entityapi-keycreate","title":"<code>POST /legal-entity/api-key/create</code>","text":"<p>API keys are valid for five years and can be named to differentiate between them easily. They are attached to the legal entity that was specified when generating them.</p> <p>The generated key is only visible once upon creation; it is the client's responsibility to store and manage it securely.</p> <p>Request Parameters - <code>legal_entity_id</code>: <code>number</code> - <code>name</code>: <code>string</code></p> <p>Required Permissions The caller must have the <code>create_api_key</code> permission, either generally or specifically for the targeted legal entity ID.</p> <pre><code>{\n  \"api_key_id\": 4,\n  \"legal_entity_id\": 1,\n  \"prefix\": \"9tsIF\",\n  \"name\": \"test\",\n  \"active\": true,\n  \"creation_time\": \"2024-07-17T17:01:50.837261\",\n  \"expiration_time\": \"2029-07-16T17:01:50.833435\",\n  \"api_key\": \"9tsIFO4XJA-viHR4ga8AW_aixe7mH7IblnB2pNjukYo\"\n}\n</code></pre> <p>After the API key has been created, DeltaPay will grant it permissions based on the client's requirements. Please refer to the Permissions chapter for more information.</p>"},{"location":"setup/#get-legal-entityapi-keys","title":"<code>GET /legal-entity/api-keys</code>","text":"<p>Returns the API keys attached to a legal entity.</p> <p>Request Parameters - <code>legal_entity_id</code>: <code>number</code></p> <p>Required Permissions The caller must have the <code>view_api_keys</code> permission, either generally or specifically for the targeted legal entity.</p> <pre><code>{\n  \"api_keys\": [\n    {\n      \"api_key_id\": 1,\n      \"legal_entity_id\": 1,\n      \"prefix\": \"OyDH-\",\n      \"name\": \"test\",\n      \"active\": false,\n      \"creation_time\": \"2024-07-12T10:32:30.553105\",\n      \"expiration_time\": \"2029-07-11T10:32:30.543345\"\n    },\n    ...\n    {\n      \"api_key_id\": 4,\n      \"legal_entity_id\": 1,\n      \"prefix\": \"9tsIF\",\n      \"name\": \"test\",\n      \"active\": true,\n      \"creation_time\": \"2024-07-17T17:01:50.837261\",\n      \"expiration_time\": \"2029-07-16T17:01:50.833435\"\n    }\n  ]\n}\n</code></pre> <p>Note how the API key with <code>id</code> 4 we previously created only returns the prefix and name but not the full key.</p>"},{"location":"setup/#delete-legal-entityapi-keyrevoke","title":"<code>DELETE legal-entity/api-key/revoke</code>","text":"<p>API keys can be revoked prior to their expiry date. It is crucial to revoke keys immediately that are suspected to have been leaked. Revoked keys cannot be reactivated.</p> <p>Request Parameters - <code>api_key_id</code>: <code>number</code></p> <p>Required Permissions The caller must have the <code>revoke_api_key</code> permission, either generally or specifically for the legal entity that the key is linked to.</p>"},{"location":"setup/#linking-api-key","title":"Linking API Key","text":"<p>As mentioned in Blockchain Transaction Signatures, the user must link the wallet address and account and either user or API key in order to use for it to be whitelisted on the blockchain.</p> <p>Please refer to the code example for more details on this process.</p> <p>In the case of API keys, this is achieved by calling the following endpoint:</p>"},{"location":"setup/#post-accountlink-api-key","title":"<code>POST /account/link-api-key</code>","text":"<p>If the API key is already linked to the account, calling this endpoint will update the wallet address. This has the same effect as unlinking and relinking with while providing a different wallet address.</p> <p>Request Parameters - <code>api_key_id</code>: <code>number</code> - <code>account_id</code>: <code>number</code> - <code>wallet_address</code>: <code>string</code></p> <p>Required Permissions The caller must have the <code>link_api_key_to_account</code> permission, either generally or specifically for the account that the key is being linked to.</p>"},{"location":"setup/#post-accountunlink-api-key","title":"<code>POST /account/unlink-api-key</code>","text":"<p>API keys can be unlinked again. The wallet address that was provided when linking the key will be removed from the whitelist and added to the list of deactivated wallet addresses for the account-API-key pair.</p> <p>Important: Immediately unlink (or update) the API key if there is suspicion that the private key matching the wallet address linked to the account has been leaked. After unlinking the key, the same key can be linked again while providing a different wallet address (of a newly generated wallet). Alternatively, <code>POST /account/link-api-key</code> can be called directly with the new wallet address. This has the same effect as unlinking and relinking.</p> <p>Request Parameters - <code>api_key_id</code>: <code>number</code> - <code>account_id</code>: <code>number</code></p> <p>Required Permissions The caller must have the <code>unlink_api_key_to_account</code> permission, either generally or specifically for the account that the key is being unlinked from.</p>"},{"location":"setup/#callback-registration","title":"Callback Registration","text":"<p>The user can register callbacks for a number of events that occur on the DeltaPay system. To ensure easy extensibility, the user only registers the base URL to which he wants the callback requests sent to.</p> <p>For example, if the callback endpoint is <code>api.client.co.sz</code>, the IPN callback will call <code>POST api.client.co.sz/transaction/status</code>.</p> <p>The following endpoints are for setting, viewing, and deactivating the callback URL for a specific account.</p>"},{"location":"setup/#post-accountcallback-urlset","title":"<code>POST /account/callback-url/set</code>","text":"<p>Request Parameters - <code>account_id</code>: <code>number</code></p> <p>**Required Permissions The caller must have the <code>set_callback_url</code> permission, either generally or specifically for the account that the callback URL is set for.</p>"},{"location":"setup/#get-accountcallback-url","title":"<code>GET /account/callback-url</code>","text":"<p>Request Parameters - <code>account_id</code>: <code>number</code></p> <p>Required Permissions The caller must have the <code>view_callback_url</code> permission, either generally or specifically for the account.</p> <p>Example Response</p> <pre><code>{\n  \"callback_url\": \"https://api.client.co.sz\"\n}\n</code></pre>"},{"location":"setup/#delete-accountcallback-urldeactivate","title":"<code>DELETE /account/callback-url/deactivate</code>","text":"<p>Sets the callback URL to null so that no more callbacks will be called for events related to this account.</p> <p>Request Parameters - <code>account_id</code>: <code>number</code></p> <p>Required Permissions The caller must have the <code>set_callback_url</code> permission, either generally or specifically for the account for which the callback URL is being deactivated.</p>"}]}